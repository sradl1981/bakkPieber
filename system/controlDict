/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     chtMultiRegionFoam; 

startFrom       latestTime;

//startFrom 	startTime;
//startTime       0;

stopAt          endTime;

endTime         20.0;

deltaT          1e-8;

writeControl    timeStep;

writeInterval   20; //1

purgeWrite      5; //keep the last 5 time steps

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

maxCo           0.30; //0.30

adjustTimeStep  yes;

maxDi           10.0;



// ************************************************************************* //
functions
(

pressureDrop
{
    type            faceSource;
    functionObjectLibs ("libfieldFunctionObjects.so");

    log             true;
    valueOutput     true;

    outputControl   timeStep;
    outputInterval  20;

    surfaceFormat   null;
    source          sampledSurface; 
    region fluid; 

  //  sourceName      inlet;
    sampledSurfaceDict
        {
        type patchInternalField;
        patches ( ".*inlet.*" );

        offsetMode normal;
        distance 0.00;
        interpolate false;
       }
     
    operation       areaAverage;
    fields
    (  p  );
}

Tf_out
{
    type            faceSource;
    functionObjectLibs ("libfieldFunctionObjects.so");

    log             true;
    valueOutput     true;

    outputControl   timeStep;
    outputInterval  20;

    surfaceFormat   null;
    source          patch;
    sourceName      outlet;
    region fluid;
                   
    operation       weightedAverage; //need to weight with surface flux!

    weightField     phi; //surface flux

    fields
    (
        T
    );
}

T_sphere_mean
    {
    
        type                  cellSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        outputControl   timeStep;
        outputInterval   20;
        log                   yes;
        valueOutput           true;
        source              cellZone; // sampledSurface; //patch //faceZone
        sourceName     bedOfSpheres; //patch name
    
        region bedOfSpheres;
    
        operation         volAverage;
	surfaceFormat	raw;

        fields
        (
            T
        );
    }

 T_surface_mean
    {
    
        type                  faceSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        outputControl   timeStep;
        outputInterval   20;
        log                   yes;
        valueOutput           true;
        source              patch; // sampledSurface; //patch //faceZone
        sourceName         bedOfSpheres_to_fluid; //patch name
    
        region bedOfSpheres;
    
        operation         areaAverage;
	surfaceFormat	raw;

        fields
        (
            T
        );
        interpolate false;
    }

   T_sphere_integral
    {
    
        type                  cellSource;
        functionObjectLibs ("libfieldFunctionObjects.so");
        outputControl   timeStep;
        outputInterval  20;
        log                   yes;
        valueOutput           true;
        source              cellZone; // sampledSurface; //patch //faceZone
        sourceName     bedOfSpheres; //patch name
        region bedOfSpheres;
  	    operation         volIntegrate;
	    surfaceFormat	raw;

        fields
        (
            T
        );
    }
// ************************************************************************* //
sampleSphereSurface
{
    type sets;
    interpolationScheme cell; //takes cell value! 
    setFormat raw;
    region fluid;
        outputControl   timeStep;
        outputInterval   1000;

sets
(
   sphereSurface
    {
        type    circle;
        axis     xyz;
        origin          (0 0 0);        //- Origin (x, y, z) in global cartesian co-ordinates
        circleAxis     (0 1 0);             //- Axis of the circle
        startPoint    (0 0 0.302e-3);  //- Point on circle (x, y, z) in global cartesian co-ordinates. Defines start point
        dTheta 2;                              //- Sampling interval in degrees about the origin
	interpolate true;

    }

);

fields          ( T ); 

}

// ************************************************************************* //
     sliceData0_fluid
      {
          type surfaces;
          functionObjectLibs ("libsampling.so");
          interpolationScheme cell;

        outputControl   timeStep;
        outputInterval   1000;
          surfaceFormat vtk;
	region fluid;

          fields ( U p T );

          surfaces
          (
              slice_parallel_0
              {
                  type cuttingPlane;
                  planeType pointAndNormal;
                  pointAndNormalDict
                  {
                      basePoint (0 0 0);
                      normalVector (0 1 0);
                  }
    	       interpolate true;
              }
  	   );
        } 
  sliceData0_bedOfSpheres
      {
          type surfaces;
          functionObjectLibs ("libsampling.so");
          interpolationScheme cell;

        outputControl   timeStep;
        outputInterval   1000;
          surfaceFormat vtk;
	region bedOfSpheres;

          fields (  T );

          surfaces
          (
              slice_parallel_0
              {
                  type cuttingPlane;
                  planeType pointAndNormal;
                  pointAndNormalDict
                  {
                      basePoint (0 0 0);
                      normalVector (0 1 0);
                  }
    	       interpolate true;
              }
  	   );
        } 
);
